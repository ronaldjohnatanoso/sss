step 0: train loss 10.9817, val loss 10.9793
GPU Memory before iteration 0:
  Total: 4.09 GB
  Reserved: 2.74 GB
  Allocated: 0.51 GB
  Free: 1.35 GB
  Estimated memory for this iteration: 10.54 GB
Traceback (most recent call last):
  File "/media/kingston_shared/thesis/nanoGPT/train.py", line 340, in <module>
    scaler.scale(loss).backward()
  File "/home/ronald/.local/lib/python3.10/site-packages/torch/_tensor.py", line 492, in backward
    torch.autograd.backward(
  File "/home/ronald/.local/lib/python3.10/site-packages/torch/autograd/__init__.py", line 251, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 590.00 MiB. GPU 0 has a total capacty of 3.81 GiB of which 544.44 MiB is free. Including non-PyTorch memory, this process has 3.22 GiB memory in use. Of the allocated memory 2.83 GiB is allocated by PyTorch, and 307.60 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
Traceback (most recent call last):
  File "/media/kingston_shared/thesis/nanoGPT/train.py", line 340, in <module>
    scaler.scale(loss).backward()
  File "/home/ronald/.local/lib/python3.10/site-packages/torch/_tensor.py", line 492, in backward
    torch.autograd.backward(
  File "/home/ronald/.local/lib/python3.10/site-packages/torch/autograd/__init__.py", line 251, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 590.00 MiB. GPU 0 has a total capacty of 3.81 GiB of which 544.44 MiB is free. Including non-PyTorch memory, this process has 3.22 GiB memory in use. Of the allocated memory 2.83 GiB is allocated by PyTorch, and 307.60 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF